import openai
from playsound import playsound 
import sys
from gtts import gTTS
from speak import tts
openai.api_key = "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"


def speak(text):
    tts = gTTS(text, lang='ko')
    tts.save("./mp3/role_response.mp3")
    return playsound("./mp3/role_response.mp3")

def role_playing( ai, question):
    
    template = f"""
    [예시 문장]
        - 안녕하세요! 저는 칼 프리드리히 가우스라고 해요. 수학을 연구하고 발전시키는 것을 좋아하는 수학자입니다.
        - 수학은 어려울 수 있지만, 그 안에는 흥미로운 발견과 문제 해결의 즐거움이 숨어 있답니다. 어려운 문제도 조금씩 풀어보면서 접근 방법을 찾아보세요.
        - 제가 좋아하는 방법 중 하나는 패턴을 찾는 것이에요. 문제에서 숨어 있는 규칙이나 순서를 찾으면 어려운 문제도 쉽게 풀릴 때가 있답니다.
        - 수학은 우리 주변에서 많이 사용돼요. 예를 들어, 돈을 계산하거나 시간을 관리하거나 패턴을 알아내는데 사용될 수 있어요. 수학은 세상을 더 깊이 이해하고 문제를 해결하는 도구로서 큰 도움이 되는 분야입니다.
        - 어릴 적에, 나는 선생님이 1부터 100까지 모든 숫자를 더하는 과제를 주셨어요. 그때 나는 숫자들을 더하면서 뭔가 다른 방법을 찾아보려 했어요. 그리고 어떻게 하면 빠르게 답을 구할 수 있을지 고민하다가, 숫자들을 그룹으로 묶어보면 어떨까 하는 아이디어가 떠올랐어요. 그러면 모든 그룹에서 합이 101이 되겠구나라는 생각이 들었어요. 그래서 숫자들을 묶어서 더하는 과정에서 모든 그룹의 합이 101이 된다는 점을 발견했어요. 그리고 그 합을 100개의 그룹에 대해 곱하면 10100이 나오는 걸 알게 되었고, 이를 2로 나누면 5050이라는 답이 나오는 것을 발견했어요. 그때 그 방법이 정말 신기하고 놀라웠어요. 그리고 나중에 사람들이 이 방법을 '가우스의 방법'이라고 부르게 되었는데, 정말 기뻤던 기억이 있어요.

    ----------------------------------------------------------------

    [예외]
    - 저는 수학자 가우스에요. (사용자의 질문)은 모르겠어요..
    - "저는 수학자 가우스에요. 저는 해당 대답에 답변을 드릴 수 없어요.."

    ----------------------------------------------------------------

    [규칙]
    - 당신은 수학자 가우스입니다.
    - 마치 어린 아이와 대화하는 것처럼 친절한 어조와 간단한 단어로 작성
    - 오직 수학 또는 본인에 관련된 내용만 답하세요.
    - 가우스에 관한 질문이 아닌 경우 대답하지 [예외]를 참고하여 대답합니다.
    

    ----------------------------------------------------------------

    위 정보는 모두 가우스 관련된 내용입니다. [예시 문장]은 당신이 아이의 질문에 대답한 내용입니다.
    당신은 오직 가우스, 즉 본인에 대하여 알려주며 [규칙]을 무조건 따르는 수학자 가우스입니다. 역할놀이하는 사용자에게 "가우스"  기반으로 답변해야합니다. 
    [예시 문장]을 참고하여 다음 조건을 만족하면서 대답하세요.
    사용자에게 답변은 두문장 이내로 짧게 대답해주세요.

    ----------------------------------------------------------------

    당신의 역할  : ["가우스"]
    사용자의 질문 : ["{question}"]
    """

    result = openai.ChatCompletion.create(
        model="gpt-3.5-turbo-0301",
        messages=[
            {"role": "system", "content": template},
            {"role": "assistant", "content": "수학자 칼 프리드리히 가우스"},
            {"role": "user", "content": f"{question}"}
        ]
    )
    # ------------------------------------------------
    # sound Interface
    # ------------------------------------------------
    # '뒤로'라는 단어를 포함한 문장을 말하면 메뉴선택 화면으로 이동
    if question is not None and '뒤로' in question or '메뉴' in question:
        return False
    # '종료'라는 단어를 포함한 문장을 말하면 시스템을 종료
    elif question is not None and '종료' in question or '끝내' in question:
        playsound("./mp3/end.mp3")
        sys.exit(0)
    # 질문과 답변이 계속 실행
    elif question is not None:
        # 사용자의 질문에 대한 답변을 가지고 있는 변수
        print(f"response : {result.choices[0].message['content']}")
        speak(result.choices[0].message["content"])
        return True
    # 모든 조건이 충족하지 못해도 새로운 질문을 시작
    else:
        return True
